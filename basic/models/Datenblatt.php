<?php

namespace app\models;

use Yii;

/**
 * This is the model class for table "datenblatt".
 *
 * @property integer $id
 * @property string $firma_id
 * @property string $projekt_id
 * @property string $haus_id
 * @property integer $nummer
 * @property string $kaeufer_id
 * @property string $besondere_regelungen_kaufvertrag
 * @property string $sonstige_anmerkungen
 * @property integer $aktiv
 *
 * @property string $beurkundung_am
 * @property string $verbindliche_fertigstellung
 * @property string $uebergang_bnl
 * @property string $abnahme_se
 * @property string $abnahme_ge
 * @property integer $auflassung
 * @property integer $creator_user_id
 * @property string $sap_debitor_nr
 * @property string $intern_debitor_nr
 *
 * @property Abschlag[] $abschlags
 * @property Firma $firma
 * @property Haus $haus
 * @property Kaeufer $kaeufer
 * @property Projekt $projekt
 * @property Nachlass[] $nachlasses
 * @property Sonderwunsch[] $sonderwunsches
 * @property Zahlung[] $zahlungs
 * @property Entschaedigung[] $entschaedigungs
 * @property Protokoll[] $protokolls
 * @property Zinsverzug[] $zinsverzugs
 */
class Datenblatt extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'datenblatt';
    }

    public function afterFind()
    {
        parent::afterFind(); // TODO: Change the autogenerated stub

        // calculate kaufpreis
        $kaufpreisTotal = 0;
        /* @var $teileh Teileigentumseinheit */
        if ($this->haus) {
            foreach ($this->haus->teileigentumseinheits as $item) {
                $kaufpreisTotal += (float)$item->kaufpreis;
            }
        }

        // calculate sonderwÃ¼nche
        $sonderwuenscheTotal = 0;
        /* @var $item Sonderwunsch */
        foreach ($this->sonderwunsches as $item) {
            $sonderwuenscheTotal += (float)$item->rechnungsstellung_betrag;
        }

        // calculate abschlags
        /* @var $item \app\models\Abschlag */
        foreach ($this->abschlags as $item) {

            $zeilenSumme = 0;
            if ($item->kaufvertrag_angefordert) {
                $zeilenSumme += ((float)$item->kaufvertrag_prozent * $kaufpreisTotal / 100);
            }
            if ($item->sonderwunsch_angefordert) {
                $zeilenSumme += ((float)$item->sonderwunsch_prozent * $sonderwuenscheTotal / 100);
            }
            $item->kaufvertrag_betrag = (string)((float)$item->kaufvertrag_prozent * $kaufpreisTotal / 100);
            $item->sonderwunsch_betrag = (string)((float)$item->sonderwunsch_prozent * $sonderwuenscheTotal / 100);

            $item->summe = (string)$zeilenSumme;
        }
    }

    public function __get($attribute) {

        if (substr($attribute, 0, 9) == 'teeinheit' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if ($this->haus && count($this->haus->teileigentumseinheits) > $nth) {
                $te = $this->haus->teileigentumseinheits[$nth];

                switch($attributeName) {

                	case 'kaufpreis':
                        $value = (float)$te->{$attributeName};
                        break;
                    case 'te_name':
                        $value = $te->einheitstyp ? $te->einheitstyp->name : '';
                        break;
                    case 'gefoerdert':
                        $value = $te->{$attributeName} ? 'J' : 'N';
                        break;
                    case 'wohnflaeche':
                        $value = (float)$te->{$attributeName};
                        break;
                    case 'zimmer':
                        $value = $te->{$attributeName};

                        if (strlen(strstr($value, '.')) > 0) {
                            $value = Yii::$app->formatter->asDecimal($value, 1);
                        }

                        break;
                    default:                
                        $value = $te->{$attributeName};
                        break;
                }

            }

            return $value;
        }
        
        if (substr($attribute, 0, 12) == 'sonderwunsch' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->sonderwunsches) > $nth) {
                
                $sonerwunsch = $this->sonderwunsches[$nth];
                switch($attributeName) {
                    case 'rechnungsstellung_betrag':
                        $value = (float)$sonerwunsch->{$attributeName};
                        break;
                    default:                
                        $value = $sonerwunsch->{$attributeName};
                        break;
                }
            }

            return $value;
        }
        
        if (substr($attribute, 0, 8) == 'abschlag' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->abschlags) > $nth) {

                $abschlag = $this->abschlags[$nth];
                switch($attributeName) {
                    case 'kaufvertrag_prozent':
                        $value = $abschlag->{$attributeName};
                        break;
                    case 'kaufvertrag_betrag':
                        $value = (float)$abschlag->{$attributeName};
                        break;
                    default:                
                        $value = $abschlag->{$attributeName};
                        break;
                }
            }

            return $value;
        }

        if (substr($attribute, 0, 8) == 'nachlass' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->nachlasses) > $nth) {

                $nachlass = $this->nachlasses[$nth];
                switch($attributeName) {
                    
                    default:                
                        $value = $nachlass->{$attributeName};
                        break;
                }
            }

            return $value;
        }

        if (substr($attribute, 0, strlen('zinsverzug')) == 'zinsverzug' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->zinsverzugs) > $nth) {

                $zinsverzug = $this->zinsverzugs[$nth];
                switch($attributeName) {

                    default:
                        $value = $zinsverzug->{$attributeName};
                        break;
                }
            }

            return $value;
        }

        if (substr($attribute, 0, 7) == 'zahlung' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            $relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->zahlungs) > $nth) {

                $zahlung = $this->zahlungs[$nth];
                switch($attributeName) {
                    case 'kaufvertrag_prozent':
                        $value = $zahlung->{$attributeName};
                        break;
                    case 'kaufvertrag_betrag':
                        $value = $zahlung->{$attributeName};
                        break;
                    case 'kaufvertrag_angefordert':
                        $value = $zahlung->{$attributeName};
                        break;
                    default:                
                        $value = $zahlung->{$attributeName};
                        break;
                }
            }

            return $value;
        }

        if (substr($attribute, 0, strlen('entschaedigung')) == 'entschaedigung' && strpos($attribute, '__')) {

            $parts = explode('__', $attribute);
            //$relatedObject = $parts[0];
            $nth = $parts[1];
            $attributeName = $parts[2];

            $value = '';
            if (count($this->entschaedigungs) > $nth) {

                $entschaedigung = $this->entschaedigungs[$nth];
                switch($attributeName) {
//                    case 'datum':
//                        $value = $entschaedigung->{$attributeName};
//                        break;
//                    case 'betrag':
//                        $value = $entschaedigung->{$attributeName};
//                        break;
//                    case 'bemerkung':
//                        $value = $entschaedigung->{$attributeName};
//                        break;
                    default:
                        $value = $entschaedigung->{$attributeName};
                        break;
                }
            }

            return $value;
        }
        

        return parent::__get($attribute);
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            //[['kaeufer_id'], 'exist', 'skipOnError' => true, 'targetClass' => Kaeufer::className(), 'targetAttribute' => 'id'],
            [['creator_user_id'], 'required'],
            [['beurkundung_am', 'verbindliche_fertigstellung', 'uebergang_bnl', 'abnahme_se', 'abnahme_ge'], 'safe'],
            [['firma_id', 'projekt_id', 'haus_id', 'nummer', 'kaeufer_id', 'aktiv', 'auflassung', 'creator_user_id'], 'integer'], //'kaeufer_id',
            [['besondere_regelungen_kaufvertrag', 'sonstige_anmerkungen', 'sap_debitor_nr', 'intern_debitor_nr'], 'string']
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => Yii::t('app', 'ID'),
            'firma_id' => Yii::t('app', 'Firma ID'),
            'projekt_id' => Yii::t('app', 'Projekt ID'),
            'haus_id' => Yii::t('app', 'Haus ID'),
            'nummer' => Yii::t('app', 'Nummer'),
            'kaeufer_id' => Yii::t('app', 'Kaeufer ID'),
            'besondere_regelungen_kaufvertrag' => Yii::t('app', 'Besondere Regelungen Kaufvertrag'),
            'sonstige_anmerkungen' => Yii::t('app', 'Sonstige Anmerkungen'),
            'aktiv' => Yii::t('app', 'Aktiv'),

            'beurkundung_am' => Yii::t('app', 'Beurkundung am'),
            'verbindliche_fertigstellung' => Yii::t('app', 'Verbindliche Fertigstellung'),
            'uebergang_bnl' => Yii::t('app', 'Ãbergang Besitz Nutzen Lasten'),
            'abnahme_se' => Yii::t('app', 'Abnahme Sondereigentum'),
            'abnahme_ge' => Yii::t('app', 'Abnahme Gemeinschaftseigentum'),
            'auflassung' => Yii::t('app', 'Auflassung'),
            'creator_user_id' => Yii::t('app', 'Ersteller ID'),
            'sap_debitor_nr' => Yii::t('app', 'SAP-Debitor Nr.'),
            'intern_debitor_nr' => Yii::t('app', 'Interne-Debitor Nr.'),
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getAbschlags()
    {
        return $this->hasMany(Abschlag::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getFirma()
    {
        return $this->hasOne(Firma::className(), ['id' => 'firma_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getHaus()
    {
        return $this->hasOne(Haus::className(), ['id' => 'haus_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getKaeufer()
    {
        return $this->hasOne(Kaeufer::className(), ['id' => 'kaeufer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProjekt()
    {
        return $this->hasOne(Projekt::className(), ['id' => 'projekt_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getNachlasses()
    {
        return $this->hasMany(Nachlass::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getZinsverzugs()
    {
        return $this->hasMany(Zinsverzug::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getSonderwunsches()
    {
        return $this->hasMany(Sonderwunsch::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getZahlungs()
    {
        return $this->hasMany(Zahlung::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getEntschaedigungs()
    {
        return $this->hasMany(Entschaedigung::className(), ['datenblatt_id' => 'id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getProtokolls()
    {
        return $this->hasMany(Protokoll::className(), ['datenblatt_id' => 'id'])->orderBy(['erstellt_am' => SORT_DESC]);
    }

    /**
     * @return string
     */
    public function getTenummerHtml() {

        $wohnungsTenummer = array();
        $teNummers = array();

        if ($this->haus) {
            foreach ($this->haus->teileigentumseinheits as $te) {
                $teNummers[] = $te->te_nummer;
                if ($te->einheitstyp_id == 1) {
                    $wohnungsTenummer[] = $te->te_nummer;
                }
            }
            asort($teNummers);

            foreach($teNummers as $key => $tenummer) {
                if (in_array($tenummer, $wohnungsTenummer)) {
                    $teNummers[$key] = '<strong>' . $tenummer . '</strong>';
                } else {
                    $teNummers[$key] = '<small>' . $tenummer . '</small>';
                }
            }
        }

        return implode('\\ ', $teNummers);
    }

    /**
     * @return string
     */
    public function getTenummerList() {

        $wohnungsTenummer = array();
        $teNummers = array();

        if ($this->haus) {
            foreach ($this->haus->teileigentumseinheits as $te) {
                $teNummers[] = $te->te_nummer;
                if ($te->einheitstyp_id == 1) {
                    $wohnungsTenummer[] = $te->te_nummer;
                }
            }
            asort($teNummers);
        }

        return $teNummers;
    }

    public function getSonderwunschAngebotSumme() {

        $total = 0;
        foreach ($this->sonderwunsches as $sonderwunsch) {
            $total += $sonderwunsch->rechnungsstellung_betrag;
        }

        return $total;
    }

    public function getSonderwunschBeauftragtSumme() {

        $total = 0;
        foreach ($this->sonderwunsches as $sonderwunsch) {
            $total += $sonderwunsch->beauftragt_betrag;
        }

        return $total;
    }

    public function getNachlassSumme() {

        $total = 0;
        foreach ($this->nachlasses as $nachlass) {
            $total += $nachlass->betrag;
        }

        return $total;
    }

    public function getZinsverzugSumme() {

        $total = 0;
        foreach ($this->zinsverzugs as $zinsverzug) {
            $total += $zinsverzug->betrag;
        }

        return $total;
    }

    public function getZahlungSumme() {

        $total = 0;
        foreach ($this->zahlungs as $zahlung) {
            $total += $zahlung->betrag;
        }

        return $total;
    }

    public function getEntschaedigungSumme() {

        $total = 0;
        foreach ($this->entschaedigungs as $item) {
            $total += $item->betrag;
        }

        return $total;
    }

    public function getSchlussrechnungOffenerGesamtbetrag() {

        $total = .0;
        $total += $this->getKaufpreisSumme();
        $total += $this->getSonderwuenscheBetragSumme();

        return $total;
    }

    public function getZwischenSumme() {

        $this->calculate();

        $total = $this->getAbschlagSumme()
            + $this->getZinsverzugSumme()
            - $this->getNachlassSumme();

        return $total;
    }

    public function getOffenePosten() {

        $this->calculate();

        $total = $this->getAbschlagSumme()
            + $this->getZinsverzugSumme()
            - $this->getNachlassSumme()
            - $this->getZahlungSumme();

        return $total;
    }

    public function getOffenePostenSchlussrechnungAbzgNachlass() {
        $this->calculate();

//        Offener Posten (=3,5 % Schlussrate + 3,5 % SoWu) abzgl. Nachlass
//        (falls es einen gibt)
        $total = $this->getSchlussrechnungKaufvertragBetrag()
        + $this->getSchlussrechnungSonderwunschBetrag()
        - $this->getNachlassSumme();

        return $total;
    }

    public function getAbschlagSumme() {
        
        $this->calculate();

        $total = 0;
        foreach ($this->abschlags as $abschlag) {
            $total += $abschlag->summe;
        }

        return $total;
    }

    public function getAngeforderteAbschlagProzentSumme() {

        $total = 0;
        foreach ($this->abschlags as $abschlag) {
            if ($abschlag->kaufvertrag_angefordert) {
                $total += $abschlag->kaufvertrag_prozent;
            }
        }

        return $total;
    }

    public function getZugewieseneMeilensteinProzentSumme() {

        $total = 0;
        foreach ($this->abschlags as $abschlag) {
            $total += $abschlag->kaufvertrag_prozent;
        }

        return $total;
    }


    public function calculate()
    {
        // calculate kaufpreis
        $kaufpreisTotal = 0;
        /* @var $teileh Teileigentumseinheit */
        if ($this->haus) {
            foreach ($this->haus->teileigentumseinheits as $item) {
                $kaufpreisTotal += (float)$item->kaufpreis;
            }
        }

        // calculate sonderwÃ¼nche
        $sonderwuenscheTotal = 0;
        /* @var $item Sonderwunsch */
        foreach ($this->sonderwunsches as $item) {
            $sonderwuenscheTotal += (float)$item->rechnungsstellung_betrag;
        }

        // calculate abschlags
        /* @var $item \app\models\Abschlag */
        foreach ($this->abschlags as $item) {

            $zeilenSumme = 0;
            if ($item->kaufvertrag_angefordert) {
                $zeilenSumme += ((float)$item->kaufvertrag_prozent * $kaufpreisTotal / 100);
            }
            if ($item->sonderwunsch_angefordert) {
                $zeilenSumme += ((float)$item->sonderwunsch_prozent * $sonderwuenscheTotal / 100);
            }
            $item->kaufvertrag_betrag = ((float)$item->kaufvertrag_prozent * $kaufpreisTotal / 100);
            $item->sonderwunsch_betrag = ((float)$item->sonderwunsch_prozent * $sonderwuenscheTotal / 100);

            $item->summe = $zeilenSumme;
        }
    }

    public function getUebergangBnlLabel()
    {
        if ($this->uebergang_bnl === null) {
            $label = '';
        } else {
            $label = Yii::$app->formatter->asDate($this->uebergang_bnl);
        }
        return $label;
    }

    public function getBeurkundungAmLabel()
    {
        if ($this->beurkundung_am === null) {
            $label = '';
        } else {
            $label = Yii::$app->formatter->asDate($this->beurkundung_am);
        }
        return $label;
    }

    public function getAbnahmeSeLabel()
    {
        if ($this->abnahme_se === null) {
            $label = '';
        } else {
            $label = Yii::$app->formatter->asDate($this->abnahme_se);
        }
        return $label;
    }

    public function getAbnahmeGeLabel()
    {
        if ($this->abnahme_ge === null) {
            $label = '';
        } else {
            $label = Yii::$app->formatter->asDate($this->abnahme_ge);
        }
        return $label;
    }

    public function updateInternDebitorNr() {

        $internDebitorNr = $this->sap_debitor_nr . '-';
        if ($this->haus) {
            foreach($this->haus->teileigentumseinheits as $teileigentumseinheit) {
                $internDebitorNr .=
                    $teileigentumseinheit->einheitstyp->prefix_debitor_nr . $teileigentumseinheit->te_nummer;
            }
        }

        $this->intern_debitor_nr = $internDebitorNr;

        $this->save();
    }

    public function istAngefordert() {
        $result = false;
        foreach ($this->abschlags as $abschlag) {
            $result |= !empty($abschlag->kaufvertrag_angefordert);
        }
        return $result;
    }

    public function kannAbschlaegeAusProjektErstellen() {
        return $this->projekt && !$this->istAngefordert();
    }

    public function getBenutzteMeilensteinIds() {
        $result = [];
        foreach ($this->abschlags as $abschlag) {
            foreach ($abschlag->abschlagMeilensteins as $abschlagMeilenstein) {
                $result[$abschlagMeilenstein->meilenstein_id] = $abschlagMeilenstein->meilenstein_id;
            }
        }
        return $result;
    }

    public function getAngeforderteAbschlagIds() {
        $result = [];
        foreach ($this->abschlags as $abschlag) {
            if ($abschlag->kaufvertrag_angefordert) {
                $result[$abschlag->id] = $abschlag->id;
            }
        }
        return $result;
    }

    public function getAngeforderteAbschlagNamen() {
        $result = [];
        foreach ($this->abschlags as $abschlag) {
            if ($abschlag->kaufvertrag_angefordert) {
                $result[$abschlag->name] = $abschlag->name;
            }
        }
        return $result;
    }

    public function getAngeforderteMeilensteine() {
        $result = [];
        foreach ($this->abschlags as $abschlag) {
            if ($abschlag->kaufvertrag_angefordert) {
                foreach ($abschlag->abschlagMeilensteins as $abschlagMeilenstein) {
                    $result[$abschlagMeilenstein->meilenstein_id] = $abschlagMeilenstein->meilenstein->name;
                }
            }
        }
        return $result;
    }

    public function hasAngeforderteSonderwuensche() {
        $result = false;
        foreach ($this->sonderwunsches as $sonderwunsch) {
            $result |= !empty($sonderwunsch->beauftragt_datum);
        }
        return $result;
    }

    public function getKaeuferDaten() {
        $kaeuferDaten = array();
        $kaeufer = $this->kaeufer;
        if ($kaeufer) {

            if (strlen($kaeufer->vorname . $kaeufer->nachname) > 0) {
                $kaeuferDaten[] = [
                    'anrede' => $kaeufer->anrede,
                    'vorname' => $kaeufer->vorname,
                    'nachname' => $kaeufer->nachname
                ];
            }
            if (strlen($kaeufer->vorname2 . $kaeufer->nachname2) > 0) {
                $kaeuferDaten[] = [
                    'anrede' => $kaeufer->anrede2,
                    'vorname' => $kaeufer->vorname2,
                    'nachname' => $kaeufer->nachname2
                ];
            }
            if ($kaeufer->anrede == 0 && $kaeufer->anrede2 == 1) {
                $kaeuferDaten = array_reverse($kaeuferDaten);
            }
        }
        return $kaeuferDaten;
    }

    public function getBriefanrede() {
        return 'Sehr geehrte Damen und Herren,<br>';
    }
    public function getPersoenlicheBriefanrede() {
        //Sehr geehrte Frau XXX,
        //Sehr geehrter Herr XXX,
        //Sehr geehrte Frau XXX, sehr geehrter Herr XXX,
        //Sehr geehrter Herr XXX, sehr geehrter Herr XXX
        //Sehr geehrte Frau XXX, sehr geehrter Frau XXX,

        $persoenlicheBriefanrede = '';
        foreach ($this->getKaeuferDaten() as $key => $data) {
            $anredeSatz = $data['anrede'] == 1 ? 'sehr geehrte Frau' : 'sehr geehrter Herr';
            if ($key == 0) {
                $anredeSatz = ucfirst($anredeSatz);
            }
//            $persoenlicheBriefanrede .= $anredeSatz . ' ' . $data['vorname'] . ' ' . $data['nachname'] . ', ';
            $persoenlicheBriefanrede .= $anredeSatz . ' ' . $data['nachname'] . ', ';
        }
        $persoenlicheBriefanrede .= '<br>';

        return $persoenlicheBriefanrede;
    }

    /**
     * @return array
     */
    public function getReplaceData() {

        $datenblatt = $this;
        $projekt = $datenblatt->projekt;

//        $abschlagNr = 0;
//        foreach($datenblatt->abschlags as $abschlag) {
//            $abschlagNr++;
//            if($abschlag->id == $this->id) {
//                break;
//            }
//        }

        $kaeuferDaten = array();
        $kaeufer = $datenblatt->kaeufer;
        if (strlen($kaeufer->vorname . $kaeufer->nachname) > 0) {
            $kaeuferDaten[] = ($kaeufer->anrede == 1 ? 'Frau' : 'Herrn') . ' ' . $kaeufer->vorname . ' ' . $kaeufer->nachname;
        }
        if (strlen($kaeufer->vorname2 . $kaeufer->nachname2) > 0) {
            $kaeuferDaten[] = ($kaeufer->anrede2 == 1 ? 'Frau' : 'Herrn') . ' ' . $kaeufer->vorname2 . ' ' . $kaeufer->nachname2;
        }
        if ($kaeufer->anrede == 0 && $kaeufer->anrede2 == 1) {
            $kaeuferDaten = array_reverse($kaeuferDaten);
        }

        $kaeuferNamen = '';
        $cnt = count($kaeuferDaten);
        if ($cnt==2){
            $kaeuferNamen=implode('<br>', $kaeuferDaten);
        } else {
            $kaeuferNamen =
                ($kaeufer->anrede == 1 ? 'Frau' : 'Herrn') . '<br>'
                . $kaeufer->vorname . ' ' . $kaeufer->nachname;
        }

        $einheitstypStellplatz = Einheitstyp::findOne(Einheitstyp::TYP_STELLPLATZ);
        $einheitstypLagerraum = Einheitstyp::findOne(Einheitstyp::TYP_LAGERRAUM);
        $einheitstypGarage = Einheitstyp::findOne(Einheitstyp::TYP_GARAGE);
        $einheitstypAussenstellplatz = Einheitstyp::findOne(Einheitstyp::TYP_AUSSENSTELLPLATZ);
        $einheitstypKeller = Einheitstyp::findOne(Einheitstyp::TYP_KELLER);



        $replaceData = [
            '[briefanrede]' => $this->getBriefanrede(),
            '[persoenliche-briefanrede]' => $this->getPersoenlicheBriefanrede(),
            '[projekt-name]' => $projekt->name,
            '[projekt-strasse]' => $projekt->strasse . $projekt->hausnr,
            '[projekt-ort]' => $projekt->ort,
            '[wohnung-nr]' => $datenblatt->haus->tenummer,
    //            '[kaufpreisabrechnung-kaufvertrag-in-prozent]' => number_format($this->kaufvertrag_prozent, 2, ',', '.'),
    //            '[kaufpreisabrechnung-kaufvertrag-betrag]' => number_format($this->kaufvertrag_betrag, 2, ',', '.'),
    //            '[erstell-datum]' => Yii::$app->formatter->asDate($this->erstell_datum, 'medium'),
    //            '[abschlag-nr]' => $abschlagNr,
            '[debitor-nr]' => $datenblatt->kaeufer->debitor_nr,
//            '[kaeufer-anrede]' => $datenblatt->kaeufer->anrede == 1 ? 'Frau' : 'Herrn',
//            '[kaeufer-vorname]' => $datenblatt->kaeufer->vorname,
//            '[kaeufer-nachname]' => $datenblatt->kaeufer->nachname,
            '[kaeufer-strasse]' => $datenblatt->kaeufer->strasse,
            '[kaeufer-strassen-nr]' => $datenblatt->kaeufer->hausnr,
            '[kaeufer-plz]' => $datenblatt->kaeufer->plz,
            '[kaeufer-ort]' => $datenblatt->kaeufer->ort,
            '[kaeufer]' => $kaeuferNamen,
            '\r\n' => '<br>',
            '\n\    r' => '<br>',
            '[tenummer-stellplatz]' => $datenblatt->haus->getTenummerForEinheitstyp(Einheitstyp::TYP_STELLPLATZ),
            '[tenummer-lagerraum]' => $datenblatt->haus->getTenummerForEinheitstyp(Einheitstyp::TYP_LAGERRAUM),
            '[tenummer-garage]' => $datenblatt->haus->getTenummerForEinheitstyp(Einheitstyp::TYP_GARAGE),
            '[tenummer-aussenstellplatz]' => $datenblatt->haus->getTenummerForEinheitstyp(Einheitstyp::TYP_AUSSENSTELLPLATZ),
            '[tenummer-keller]' => $datenblatt->haus->getTenummerForEinheitstyp(Einheitstyp::TYP_KELLER),
            '[einheitstypname-stellplatz]' => $einheitstypStellplatz->name,
            '[einheitstypname-lagerraum]' => $einheitstypLagerraum->name,
            '[einheitstypname-garage]' => $einheitstypGarage->name,
            '[einheitstypname-aussenstellplatz]' => $einheitstypAussenstellplatz->name,
            '[einheitstypname-keller]' => $einheitstypKeller->name,
            '[sonderwuensche-zusammenfassung]' => $datenblatt->getSonderwunschZusammenfassungTabelle(),
            '[aktuelles-datum]' => date('d.m.Y'),
        ];

        return $replaceData;
    }

    public function getSonderwunschPdfContent(Vorlage $vorlage) {

        $content = $this->projekt->mail_header;
        $content .= strtr($vorlage->text, $this->getReplaceData());
        $content .=
            '<div class="footer" style="font-size: 9px; text-align: center; position: absolute; bottom: 40px; width: 85%;">'
            . $this->projekt->mail_footer
            . '</div>';

        return $content;
    }

    public function getAngeforderteSonderwuensche() {
        $result = [];
        foreach ($this->sonderwunsches as $sonderwunsch) {
            if (!empty($sonderwunsch->beauftragt_datum)) {
                $result[] = $sonderwunsch;
            }
        }
        return $result;
    }

    public function getSonderwunschZusammenfassungTabelle() {
        $sonderwuenscheZusammenfassung = '<table style="width: 60%; margin: 0 auto;">';
        foreach ($this->getAngeforderteSonderwuensche() as $sonderwunsch) {
            $sonderwuenscheZusammenfassung .= '<tr>';
            $sonderwuenscheZusammenfassung .= '<td>';
            $sonderwuenscheZusammenfassung .= "Beauftragt vom " . Yii::$app->formatter->asDate($sonderwunsch->beauftragt_datum). " ($sonderwunsch->name)";
            $sonderwuenscheZusammenfassung .= '</td>';
            $sonderwuenscheZusammenfassung .= '<td style="text-align: right;">';
            $sonderwuenscheZusammenfassung .= Yii::$app->formatter->asCurrency($sonderwunsch->beauftragt_betrag);
            $sonderwuenscheZusammenfassung .= '</td>';
            $sonderwuenscheZusammenfassung .= '</tr>';
        }
        $sonderwuenscheZusammenfassung .= '<tr class="bordertop">';
        $sonderwuenscheZusammenfassung .= '<td>';
        $sonderwuenscheZusammenfassung .= "<b>Zahlungsbetrag Gesamt</b>";
        $sonderwuenscheZusammenfassung .= '</td>';
        $sonderwuenscheZusammenfassung .= '<td style="text-align: right;">';
        $sonderwuenscheZusammenfassung .= "<b>".Yii::$app->formatter->asCurrency($this->getSonderwunschBeauftragtSumme()) . "</b>";
        $sonderwuenscheZusammenfassung .= '</td>';
        $sonderwuenscheZusammenfassung .= '</tr>';
        $sonderwuenscheZusammenfassung .= '</table>';

        return $sonderwuenscheZusammenfassung;
    }

    public function isAbschlagAngefordert() {
        $istAngefordert = false;
        /** @var Abschlag $abschlag */
        foreach ($this->abschlags as $abschlag) {
            if (strlen($abschlag->kaufvertrag_angefordert) > 0) {
                $istAngefordert = true;
            }
        }

        return $istAngefordert;
    }

    public function updateAddresseVonProjekt() {

        if ($this->projekt) {

            if (!$this->haus_id) {
                $haus = new Haus();
                $haus->projekt_id = $this->projekt_id;
                $haus->firma_id = $this->firma_id;
                $haus->creator_user_id = User::getCurrentUser()->id;
                $haus->save();

                $this->haus_id = $haus->id;
                $this->save();
            } else {
                $haus = $this->haus;
            }

//            if ($this->haus) {
                $haus->strasse = $this->projekt->strasse;
                //$this->haus->hausnr = $this->projekt->hausnr;
                $haus->plz = $this->projekt->plz;
                $haus->ort = $this->projekt->ort;
                $haus->save();
//            }
        }

    }

    public function getKaufpreisSumme() {
        $kaufvertragSumme = .0;
        foreach($this->abschlags as $abschlag) {
            $kaufvertragSumme += (float) $abschlag->kaufvertrag_betrag;
        }
        return $kaufvertragSumme;
    }

    public function getKaufpreisSummeFormatted() {
        return number_format($this->getKaufpreisSumme(), 2, ',', '.') . ' â¬';
    }

    public function getSonderwuenscheBetragSumme() {
        // calculate sonderwÃ¼nche
        $sonderwuenscheTotal = 0;
        /* @var $item Sonderwunsch */
        foreach ($this->sonderwunsches as $item) {
            $sonderwuenscheTotal += (float)$item->rechnungsstellung_betrag;
        }
        return $sonderwuenscheTotal;
    }

    public function getAbschlagSonderwunschSummeAngefordert() {
        $summe = .0;
        /** @var Abschlag $abschlag */
        foreach($this->abschlags as $abschlag) {
//            if ($abschlag->sonderwunsch_angefordert) {
            $summe += (float) $abschlag->sonderwunsch_betrag;
//            }
        }
        return $summe;
    }

    public function getSchlussrechnungKaufvertragBetrag() {
        $cnt = count($this->abschlags)-1;
        foreach ($this->abschlags as $key => $abschlag) {
            if ($key == $cnt) {
                return $abschlag->kaufvertrag_betrag;
            }
        }
        return '';
    }

    public function getSchlussrechnungKaufvertragBetragFormatted() {
        return number_format($this->getSchlussrechnungKaufvertragBetrag(), 2, ',', '.') . ' â¬';
    }

    public function getSchlussrechnungSonderwunschBetrag() {
        $cnt = count($this->abschlags)-1;
        foreach ($this->abschlags as $key => $abschlag) {
            if ($key == $cnt) {
                return $abschlag->sonderwunsch_betrag;
            }
        }
        return '';
    }

    public function getSchlussrechnungSonderwunschBetragFormatted() {
        return number_format($this->getSchlussrechnungSonderwunschBetrag(), 2, ',', '.') . ' â¬';
    }

    public function getGesamtforderung() {

        // Gesamtforderung = Kaufpreis + Summe Sonderzahlungen +- Minderungen/Nachlass + Verzugszins AbzÃ¼glich Zahlungen

        $abschlagKaufvertragSumme = $this->getKaufpreisSumme();
        // +
        $abschlagSonderwunschSummeAngefordert = $this->getAbschlagSonderwunschSummeAngefordert();
        // -
        $minderungenNachlassSumme = $this->getNachlassSumme();
        // +
        $verzugszinsSumme = $this->getZinsverzugSumme();
        // -
        $zahlungSumme = $this->getZahlungSumme();
//        var_dump('$abschlagKaufvertragSumme: ' . $abschlagKaufvertragSumme);
//        var_dump('$abschlagSonderwunschSummeAngefordert: ' . $abschlagSonderwunschSummeAngefordert);
//        var_dump('$minderungenNachlassSumme: ' . $minderungenNachlassSumme);
//        var_dump('$verzugszinsSumme: ' . $verzugszinsSumme);
//        var_dump('$zahlungSumme: ' . $zahlungSumme);
//        exit();

        $gesamtforderung =
            $abschlagKaufvertragSumme
            + $abschlagSonderwunschSummeAngefordert
            - $minderungenNachlassSumme
            + $verzugszinsSumme
            - $zahlungSumme;

        return $gesamtforderung;
    }

    public function getStatus() {
        $status = '';
        if ($this->haus) {
            $restlicheStatus = [];
            foreach ($this->haus->teileigentumseinheits as $te) {
                if ($te->einheitstyp_id == Einheitstyp::TYPE_HAUS) {
                    $status = $te->status;
                } else {
                    $restlicheStatus[] = $te->status;
                }
            }

            if ($status == '') {
                if (isset($restlicheStatus[Teileigentumseinheit::STATUS_VERKAUFT])) {
                    $status = Teileigentumseinheit::STATUS_VERKAUFT;
                } else if(isset($restlicheStatus[Teileigentumseinheit::STATUS_RESERVIERT])) {
                    $status = Teileigentumseinheit::STATUS_RESERVIERT;
                } else {
                    $status = Teileigentumseinheit::STATUS_RESERVIERT;
                }
            }
        }
        return $status;
    }

    public function getStatusLabel() {
        $status = $this->getStatus();
        return $status > 0 ? Teileigentumseinheit::statusOptions()[$status] : '';
    }

    public function getRechnungVertrieb() {

        $result = false;
        if ($this->haus) {
            foreach ($this->haus->teileigentumseinheits as $te) {
                $result |= $te->rechnung_vertrieb;
            }
        }
        return $result;
    }

    static function getGridColumns($projektId, $models) {

        // max count of teileigentumseinheits of filtered datenblatts
        $maxCountTEEinheits = Haus::find()
            ->select("COUNT('teileigentumseinheit.id') as cnt")
            ->joinWith(['teileigentumseinheits'])
            ->where(['teileigentumseinheit.projekt_id' => $projektId])
            ->groupBy(['haus.id'])
            ->max('cnt');
        $maxCountTEEinheits = intval($maxCountTEEinheits);

        // max count of sonderwuensche of filtered datenblatts
        $maxCountSonderwunsches = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->sonderwunsches);
            $maxCountSonderwunsches = max($maxCountSonderwunsches, $count);
        }

        // max count of abschlags of filtered datenblatts
        $maxCountAbschlags = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->abschlags);
            $maxCountAbschlags = max($maxCountAbschlags, $count);
        }

        // max count of nachlasses of filtered datenblatts
        $maxCountNachlasses = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->nachlasses);
            $maxCountNachlasses = max($maxCountNachlasses, $count);
        }

        $maxCountZinsverzugs = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->zinsverzugs);
            $maxCountZinsverzugs = max($maxCountZinsverzugs, $count);
        }

        // max count of zahlungs of filtered datenblatts
        $maxCountZahlungs = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->zahlungs);
            $maxCountZahlungs = max($maxCountZahlungs, $count);
        }

        // max count of entschaedigungs of filtered datenblatts
        $maxCountEntschaedigungs = 0;
        foreach ($models as $datenblatt) {
            $count = count($datenblatt->entschaedigungs);
            $maxCountEntschaedigungs = max($maxCountEntschaedigungs, $count);
        }

        $gridColumns[] = [
            'value' => 'schlussrechnungSonderwunschBetrag',
            'label' => 'Schlussrechnung - Sonderwunsch Betrag',
            'format' => ['currency'],
            'pageSummary' => true
        ];
        $gridColumns[] = [
            'attribute' => 'firma_name',
            'value'=>'firma.name',
            'label' => 'Firma'
        ];
        $gridColumns[] = [
            'attribute' => 'firma_nr',
            'value'=>'firma.nr',
            'label' => 'Buchungskr.'
        ];
        $gridColumns[] = [
            'attribute' => 'projekt_name',
            'value'=>'projekt.name',
            'label' => 'Projekt',
            'filter' => false
        ];
        $gridColumns[] = [
            'attribute' => 'haus_strasse',
            'value'=>'haus.strasse',
            'label' => 'TE-StraÃe'
        ];
        $gridColumns[] = [
            'attribute' => 'haus_hausnr',
            'value'=>'haus.hausnr',
            'label' => 'TE-Haus Nr.'
        ];
        $gridColumns[] = [
            'attribute' => 'haus_plz',
            'value'=>'haus.plz',
            'label' => 'TE-Plz'
        ];
        $gridColumns[] = [
            'attribute' => 'haus_ort',
            'value'=>'haus.ort',
            'label' => 'TE-Ort'
        ];
        $gridColumns[] = [
            'attribute' => 'sap_debitor_nr',
            'value'=>'sap_debitor_nr',
            'label' => 'SAP Debitoren Nr.'
        ];
        $gridColumns[] = [
            'attribute' => 'intern_debitor_nr',
            'value'=>'intern_debitor_nr',
            'label' => 'Interne Debitoren Nr.'
        ];

        $gridColumns[] = [
            'value' => 'kaeufer.anredeLabel',
            //'value'=> '$data->anrede == 1 ? "Herr" : "Frau"',
            'label' => 'KÃ¤ufer Anrede'
        ];
        $gridColumns[] = [
            'attribute' => 'kaeufer_titel',
            'value' => 'kaeufer.titel',
            'label' => 'KÃ¤ufer Titel'
        ];

        $gridColumns[] = [
            'attribute' => 'kaeufer_vorname',
            'value' => 'kaeufer.vorname',
            'label' => 'KÃ¤ufer Vorname'
        ];
        $gridColumns[] = [
            'attribute' => 'kaeufer_nachname',
            'value' => 'kaeufer.nachname',
            'label' => 'KÃ¤ufer Name'
        ];

        $gridColumns[] = [
            'value'=>'kaeufer.anrede2Label',
            //'value'=> '$data->anrede == 1 ? "Herr" : "Frau"',
            'label' => '2. KÃ¤ufer Anrede'
        ];
        $gridColumns[] =  [
            'attribute' => 'kaeufer_vorname2',
            'value'=>'kaeufer.vorname2',
            'label' => '2. KÃ¤ufer Vorname'
        ];
        $gridColumns[] = [
            'attribute' => 'kaeufer_titel2',
            'value'=>'kaeufer.titel2',
            'label' => '2. KÃ¤ufer Titel'
        ];
        $gridColumns[] = [
            'attribute' => 'kaeufer_nachname2',
            'value'=>'kaeufer.nachname2',
            'label' => '2. KÃ¤ufer Name'
        ];

        if (!User::hasRole('Sonderwunsch', false)) {
            $gridColumns[] =    [
                'attribute' => 'kaufpreisSumme',
                'label' => 'Gesamtsumme (Wohnung + Sondereigentum)',
                'format' => ['currency'],
                'pageSummary' => true
            ];
            $gridColumns[] = [
                'value' => 'schlussrechnungKaufvertragBetrag',
                'label' => 'Schlussrechnung - Kaufvertrag Betrag',
//        'format' => ['currency'],
                'pageSummary' => true
            ];
            $gridColumns[] =  [
                'attribute' => 'kaeufer_email',
                'value'=>'kaeufer.email',
                'label' => 'KÃ¤ufer-Email'
            ];
            $gridColumns[] = [
                'attribute' => 'kaeufer_festnetz',
                'value'=>'kaeufer.festnetz',
                'label' => 'KÃ¤ufer-Festnetznummer'
            ];
            $gridColumns[] = [
                'attribute' => 'kaeufer_handy',
                'value'=>'kaeufer.handy',
                'label' => 'KÃ¤ufer-Handynummer'
            ];

            $gridColumns[] = [
                //'filter' => Html::activeTextField($model, 'te_nummer'),
                'format' => 'html',
                'attribute' => 'te_nummer',
                'value' => 'tenummerHtml',
                'label' => 'TE-Nr'
            ];
            for ($i = 0; $i < $maxCountTEEinheits; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__te_name",
                    'label' => "{$cnt}. TE-Name"
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__te_nummer",
                    'label' => "{$cnt}. TE-Nummer"
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__gefoerdert",
                    'label' => "{$cnt}. TE-Gefoerdert",
                    'filter' => array(0 => Yii::t('app', 'No'), 1 => Yii::t('app', 'Yes')),
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__geschoss",
                    'label' => "{$cnt}. TE-Geschoss"
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__zimmer",
                    'label' => "{$cnt}. TE-Zimmer"
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__me_anteil",
                    'label' => "{$cnt}. TE-ME-Anteil",
                    'format' => ['decimal', 2],
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__wohnflaeche",
                    'label' => "{$cnt}. TE-WohnflÃ¤che",
                    'format' => ['decimal'],
                    'pageSummary' => true
                ];
                $gridColumns[] = [
                    'value'=> "teeinheit__{$i}__kaufpreis",
                    'label' => "{$cnt}. TE-Kaufpreis",
                    'format' => ['currency'],
                    'pageSummary' => true
                ];
            }

            // Kaeufer Daten
            $gridColumns = array_merge($gridColumns, [

                [
                    'value'=>'beurkundungAmLabel',
                    'label' => 'Beurkundung am:'
                ],
                [
                    'value'=>'uebergangBnlLabel',
                    'label' => '-Ãbergang BNL'
                ],
                [
                    'value'=>'abnahmeSeLabel',
                    'label' => '-Abnahme SE'
                ],
                [
                    'value'=>'abnahmeGeLabel',
                    'label' => '-Abnahme GE'
                ],
                [
                    'value'=>'kaeufer.strasse',
                    'label' => 'KÃ¤ufer StraÃe'
                ],
                [
                    'value'=>'kaeufer.hausnr',
                    'label' => 'KÃ¤ufer Hausnr.'
                ],
                [
                    'value'=>'kaeufer.plz',
                    'label' => 'KÃ¤ufer PLZ'
                ],
                [
                    'value'=>'kaeufer.ort',
                    'label' => 'KÃ¤ufer Ort'
                ],
            ]);

            for ($i = 0; $i < $maxCountAbschlags; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "abschlag__{$i}__name",
                    'label' => "{$cnt}. Abschlag-Name"
                ];
                $gridColumns[] = [
                    'value'=> "abschlag__{$i}__kaufvertrag_prozent",
                    'label' => "{$cnt}. Abschlag-Prozent",
                    'format' => ['decimal', 'decimals' => 2],
                ];
                $gridColumns[] = [
                    'value'=> "abschlag__{$i}__kaufvertrag_betrag",
                    'label' => "{$cnt}. Abschlag-Betrag",
                    'format' => ['currency'],
                    'pageSummary' => true
                ];
                $gridColumns[] = [
                    'value'=> "abschlag__{$i}__kaufvertrag_angefordert",
                    'label' => "{$cnt}. Abschlag-Angefordert"
                ];
            }

            for ($i = 0; $i < $maxCountNachlasses; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "nachlass__{$i}__schreibenVomLabel",
                    'label' => "{$cnt}. Nachlass-Schreiben vom:"
                ];
            }

            for ($i = 0; $i < $maxCountZinsverzugs; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "zinsverzug__{$i}__schreibenVomLabel",
                    'label' => "{$cnt}. Zinsverzug-Schreiben vom:"
                ];
                $gridColumns[] = [
                    'value'=> "zinsverzug__{$i}__betrag",
                    'label' => "{$cnt}. Zinsverzug-Betrag:",
                    'pageSummary' => true
                ];
            }

            $gridColumns[] = [
                'value'=> "nachlassSumme",
                'label' => "Minderungen/NachlaÃ-Summe:",
                'pageSummary' => true
            ];
            $gridColumns[] = [
                'value'=> "zinsverzugSumme",
                'label' => "Zinsverzugs-Summe:",
                'pageSummary' => true
            ];

            for ($i = 0; $i < $maxCountZahlungs; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "zahlung__{$i}__datumLabel",
                    'label' => "{$cnt}. Zahlung-Datum:"
                ];
                $gridColumns[] = [
                    'value'=> "zahlung__{$i}__betrag",
                    'label' => "{$cnt}. Zahlung-betrag:",
                    'format' => ['currency'],
                    'pageSummary' => true
                ];
            }

            $gridColumns[] = [
                'value'=> "zahlungSumme",
                'label' => "Zahlungen- bereits gezahlt:",
                'format' => ['currency'],
            ];

            $gridColumns[] = [
                'value'=> "offenePosten",
                'label' => "Offene Posten:",
                'format' => ['currency'],
            ];

            // Entschaedigungen
            for ($i = 0; $i < $maxCountEntschaedigungs; $i++) {
                $cnt = $i + 1;
                $gridColumns[] = [
                    'value'=> "entschaedigung__{$i}__datumLabel",
                    'label' => "{$cnt}. EntschÃ¤digung-Datum:",
                ];
                $gridColumns[] = [
                    'value'=> "entschaedigung__{$i}__bemerkung",
                    'label' => "{$cnt}. EntschÃ¤digung-Bemerkung:",
                ];
                $gridColumns[] = [
                    'value'=> "entschaedigung__{$i}__betrag",
                    'label' => "{$cnt}. EntschÃ¤digung-Betrag:",
                    'format' => ['currency'],
                    'pageSummary' => true
                ];
            }

            $gridColumns[] = [
                'value'=> "entschaedigungSumme",
                'label' => "EntschÃ¤digungen-Summe :",
                'format' => ['currency'],
            ];

        }

        for ($i = 0; $i < $maxCountSonderwunsches; $i++) {
            $cnt = $i + 1;
            $gridColumns[] = [
                'value'=> "sonderwunsch__{$i}__name",
                'label' => "{$cnt}. SW-Name"
            ];
            $gridColumns[] = [
                'value'=> "sonderwunsch__{$i}__rechnungsstellung_betrag",
                'label' => "{$cnt}. SW-Rechnungsstellungsbetrag",
                'format' => ['currency'],
                'pageSummary' => true
            ];
            $gridColumns[] = [
                'value'=> "sonderwunsch__{$i}__rechnungsstellung_rg_nr",
                'label' => "{$cnt}. SW-Rechnungsstellung-Rg.-Nr."
            ];
        }

        return $gridColumns;
    }

}
